name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # Code Quality and Testing
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'packages/web/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd packages/web
        npm ci
    
    - name: Run linting
      run: |
        cd packages/web
        npm run lint
    
    - name: Run type checking
      run: |
        cd packages/web
        npm run type-check || npx tsc --noEmit
    
    - name: Run tests
      run: |
        cd packages/web
        npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Run security audit
      run: |
        cd packages/web
        npm audit --audit-level high
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/web/coverage/lcov.info
        fail_ci_if_error: false

  # Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      run: |
        cd terraform/environments/dev
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform/environments/dev
        terraform plan -var="image_tag=${{ needs.build.outputs.image-tag }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.DEV_SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.DEV_SUPABASE_ANON_KEY }}
        TF_VAR_clerk_publishable_key: ${{ secrets.DEV_CLERK_PUBLISHABLE_KEY }}
    
    - name: Terraform Apply
      run: |
        cd terraform/environments/dev
        terraform apply -auto-approve -var="image_tag=${{ needs.build.outputs.image-tag }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.DEV_SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.DEV_SUPABASE_ANON_KEY }}
        TF_VAR_clerk_publishable_key: ${{ secrets.DEV_CLERK_PUBLISHABLE_KEY }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      run: |
        cd terraform/environments/staging
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform/environments/staging
        terraform plan -var="image_tag=${{ needs.build.outputs.image-tag }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.STAGING_SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        TF_VAR_clerk_publishable_key: ${{ secrets.STAGING_CLERK_PUBLISHABLE_KEY }}
    
    - name: Terraform Apply
      run: |
        cd terraform/environments/staging
        terraform apply -auto-approve -var="image_tag=${{ needs.build.outputs.image-tag }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.STAGING_SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        TF_VAR_clerk_publishable_key: ${{ secrets.STAGING_CLERK_PUBLISHABLE_KEY }}
    
    - name: Run E2E Tests
      run: |
        cd packages/web
        npm run test:e2e
      env:
        E2E_BASE_URL: ${{ secrets.STAGING_URL }}

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Terraform Init
      run: |
        cd terraform/environments/prod
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform/environments/prod
        terraform plan -var="image_tag=${{ needs.build.outputs.image-tag }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.PROD_SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
        TF_VAR_clerk_publishable_key: ${{ secrets.PROD_CLERK_PUBLISHABLE_KEY }}
    
    - name: Terraform Apply
      run: |
        cd terraform/environments/prod
        terraform apply -auto-approve -var="image_tag=${{ needs.build.outputs.image-tag }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.PROD_SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
        TF_VAR_clerk_publishable_key: ${{ secrets.PROD_CLERK_PUBLISHABLE_KEY }}
    
    - name: Health Check
      run: |
        curl -f ${{ secrets.PROD_URL }}/api/health || exit 1
    
    - name: Notify Deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}